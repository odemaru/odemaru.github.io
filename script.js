const airtableToken = "patZ3j588Sj2vd4xd.27acf31621f89399b2bcacf564b3d81f7a036ab9331221b18ff3e5a2b885ae5b"; // üëà –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
const baseId = "appwnWtPWAfhsQpDs";           // üëà –≤—Å—Ç–∞–≤—å ID –±–∞–∑—ã

function showPopupMessage(text, isSuccess) {
  const popup = document.createElement("div");
  popup.className = `popup-message ${isSuccess ? "success" : "error"}`;
  popup.textContent = text;
  document.body.appendChild(popup);
  setTimeout(() => {
    popup.classList.add("hide");
    setTimeout(() => popup.remove(), 500);
  }, 3000);
}

async function fetchUserIdByQrLink(qrLink) {
  const tableName = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏";
  const url = `https://api.airtable.com/v0/${baseId}/${encodeURIComponent(tableName)}?filterByFormula=${encodeURIComponent(`{–°—Å—ã–ª–∫–∞ –¥–ª—è QR} = "${qrLink}"`)}&maxRecords=1`;
  const res = await fetch(url, {
    headers: { Authorization: `Bearer ${airtableToken}` }
  });
  const data = await res.json();
  if (!data.records || data.records.length === 0) return null;
  return data.records[0].fields["ID"];
}

async function fetchPurchasesByUserId(userId) {
  const tableName = "–ü–æ–∫—É–ø–∫–∏";
  const url = `https://api.airtable.com/v0/${baseId}/${encodeURIComponent(tableName)}?filterByFormula=${encodeURIComponent(`{ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è} = "${userId}"`)}`;
  const res = await fetch(url, {
    headers: { Authorization: `Bearer ${airtableToken}` }
  });
  const data = await res.json();
  if (!data.records || data.records.length === 0) return [];
  return data.records.map(r => r.fields["ID —Ç–æ–≤–∞—Ä–∞"]);
}

function onScanSuccess(decodedText) {
  processQr(decodedText);
}

async function processQr(qrLink) {
  try {
    // 1. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ
    const userId = await fetchUserIdByQrLink(qrLink);
    if (!userId) {
      showPopupMessage("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", false);
      return;
    }
    // 2. –ù–∞–π—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const purchases = await fetchPurchasesByUserId(userId);
    if (purchases.length === 0) {
      showPopupMessage("–ü–æ–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", false);
      return;
    }
    // 3. –í—ã–≤–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä—ã
    const messageElem = document.getElementById("message");
    if (messageElem) {
      messageElem.textContent = `ID —Ç–æ–≤–∞—Ä–∞: ${purchases.join(", ")}`;
    }
    showPopupMessage(`ID —Ç–æ–≤–∞—Ä–∞: ${purchases.join(", ")}`, true);
  } catch (err) {
    console.error(err);
    showPopupMessage("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", false);
  }
}

const qrScanner = new Html5Qrcode("reader");
qrScanner.start(
  { facingMode: "environment" },
  { fps: 10, qrbox: 250 },
  onScanSuccess
);
